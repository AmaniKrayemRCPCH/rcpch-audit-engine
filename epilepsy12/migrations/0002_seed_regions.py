# Generated by Django 4.2 on 2023-04-24 09:56

from django.db import migrations

from ..constants import INTEGRATED_CARE_BOARDS_LOCAL_AUTHORITIES, WELSH_REGIONS, OPEN_UK_NETWORKS, COUNTRY_CODES, UK_ONS_REGIONS


def seed_regions(apps, schema_editor):
    """
    Seeds the region tables from JSON constants
    """
    IntegratedCareBoardEntity = apps.get_model(
        'epilepsy12', 'IntegratedCareBoardEntity')
    NHSRegionEntity = apps.get_model('epilepsy12', 'NHSRegionEntity')
    OPENUKNetworkEntity = apps.get_model('epilepsy12', 'OPENUKNetworkEntity')
    ONSCountryEntity = apps.get_model('epilepsy12', 'ONSCountryEntity')
    ONSRegionEntity = apps.get_model('epilepsy12', 'ONSRegionEntity')

    # seed icbs and nhs regions regions

    print('\033[38;2;17;167;142m',
          'Seeding Integrated Care Boards and England NHS Regions', '\033[38;2;17;167;142m')
    for icb_la in INTEGRATED_CARE_BOARDS_LOCAL_AUTHORITIES:

        if IntegratedCareBoardEntity.objects.filter(ODS_ICB_Code=icb_la["ODS ICB Code"]).exists():
            pass
        else:
            IntegratedCareBoardEntity(
                ODS_ICB_Code=icb_la["ODS ICB Code"],
                ONS_ICB_Boundary_Code=icb_la["ONS ICB Boundary Code"],
                ICB_Name=icb_la["ICB Name"],
            ).save()
            print(f"{icb_la['ICB Name']} added to the database.")

        if NHSRegionEntity.objects.filter(NHS_Region_Code=icb_la["NHS England Region Code"]).exists():
            pass
        else:
            NHSRegionEntity(
                NHS_Region=icb_la["NHS England Region"],
                NHS_Region_Code=icb_la["NHS England Region Code"],
                year=2019
            ).save()
            print(
                f"{icb_la['NHS England Region']} added to the database.", end='\r')

    print('\033[38;2;17;167;142m',
          'Seeding Welsh health boards', '\033[38;2;17;167;142m')
    for health_board in WELSH_REGIONS:
        if NHSRegionEntity.objects.filter(NHS_Region_Code=health_board["NHS_Region_Code"]).exists():
            pass
        else:
            NHSRegionEntity(
                NHS_Region=health_board["NHS_Region"],
                NHS_Region_Code=health_board["ODS_Code"],
                year=health_board['year']
            ).save()
            print(
                f"{health_board['NHS_Region']} added to the database.")

    print('\033[38;2;17;167;142m',
          'Seeding OPENUK Regions', '\033[38;2;17;167;142m')
    for region in OPEN_UK_NETWORKS:
        if OPENUKNetworkEntity.objects.filter(OPEN_UK_Network_Code=region["OPEN UK Network Code"]).exists():
            pass
        else:
            OPENUKNetworkEntity(
                OPEN_UK_Network_Name=region["OPEN UK Network Name"],
                OPEN_UK_Network_Code=region["OPEN UK Network Code"],
                country=region["country"]
            ).save()
            print(
                f"{region['OPEN UK Network Name']} added to the database.")

    print('\033[38;2;17;167;142m',
          'Seeding ONS countries and codes...', '\033[38;2;17;167;142m')
    for country in COUNTRY_CODES:
        if ONSCountryEntity.objects.filter(Country_ONS_Code=country["country_ons_code"]).exists():
            pass
        else:
            ONSCountryEntity(
                Country_ONS_Code=country['country_ons_code'],
                Country_ONS_Name=country['country_ons_name'],
                year=2021
            ).save()

    print('\033[38;2;17;167;142m',
          'Seeding ONS regions and codes...', '\033[38;2;17;167;142m')
    for ons_region in UK_ONS_REGIONS:
        if ONSRegionEntity.objects.filter(Region_ONS_Code=ons_region['Region_ONS_Code']).exists():
            pass
        else:
            country = ONSCountryEntity.objects.get(
                Country_ONS_Code=ons_region['Country_ONS_Code'])
            ONSRegionEntity(
                Region_ONS_Code=ons_region['Region_ONS_Code'],
                Region_ONS_Name=ons_region['Region_ONS_Name'],
                ons_country=country
            ).save()
    print('All regions added.')


class Migration(migrations.Migration):
    dependencies = [
        ("epilepsy12", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(seed_regions),
    ]
