# Generated by Django 4.2.4 on 2023-08-23 14:40

from django.db import migrations

from epilepsy12.models import (
    Organisation,
    OrganisationKPIAggregation,
    TrustKPIAggregation,
    IntegratedCareBoardEntity,
    ICBKPIAggregation,
    NHSRegionEntity,
    NHSRegionKPIAggregation,
    OPENUKNetworkEntity,
    OpenUKKPIAggregation,
    ONSCountryEntity,
    CountryKPIAggregation,
    NationalKPIAggregation,
)
from epilepsy12.general_functions import get_current_cohort_data


def seed_kpi_aggregation_models_for_all_abstractions(apps, schema_editor):
    """Seeds KPIAggregation models for all abstractions.

    Parameters:
        apps (list): A list of installed apps
        schema_editor (object): A database schema editor object
    """

    current_cohort = get_current_cohort_data()["cohort"]

    all_orgs = Organisation.objects.all().distinct()
    all_parent_organisation_ods_codes = [
        code[0]
        for code in Organisation.objects.all()
        .values_list("ParentOrganisation_ODSCode")
        .distinct()
    ]
    all_icbs = IntegratedCareBoardEntity.objects.all().distinct()
    all_nhs_regions = NHSRegionEntity.objects.all().distinct()
    all_open_uks = OPENUKNetworkEntity.objects.all().distinct()
    all_countries = ONSCountryEntity.objects.all().distinct()

    all_entities = [
        all_orgs,
        all_parent_organisation_ods_codes,
        all_icbs,
        all_nhs_regions,
        all_open_uks,
        all_countries,
    ]
    all_agg_models = [
        OrganisationKPIAggregation,
        TrustKPIAggregation,
        ICBKPIAggregation,
        NHSRegionKPIAggregation,
        OpenUKKPIAggregation,
        CountryKPIAggregation,
    ]

    if len(all_entities) != len(all_agg_models):
        raise ValueError("Incorrect lengths for entities")

    for entities, AggregationModel in zip(all_entities, all_agg_models):
        print(f"Creating aggregations for {AggregationModel}")
        for entity in entities:
            if AggregationModel.objects.filter(
                abstraction_relation=entity,
                cohort=current_cohort,
            ).exists():
                print(f"AggregationModel for {entity} already exists. Skipping...")
                continue

            new_agg_model = AggregationModel.objects.create(
                abstraction_relation=entity,
                cohort=current_cohort,
            )

            print(f"Created {new_agg_model}")

    # National handled separately as it has no abstraction relation field 
    if NationalKPIAggregation.objects.filter(
        cohort=current_cohort,
    ).exists():
        print(f"NationalKPIAggregation for {entity} already exists. Skipping...")
    else:
        new_agg_model = NationalKPIAggregation.objects.create(
            cohort=current_cohort,
        )
        print(f"Created {new_agg_model} (Cohort {current_cohort})")


class Migration(migrations.Migration):
    dependencies = [
        ("epilepsy12", "0035_basekpimetrics_and_more"),
    ]

    operations = [
        migrations.RunPython(seed_kpi_aggregation_models_for_all_abstractions)
    ]
