# Generated by Django 4.0.4 on 2022-08-29 18:26

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Epilepsy12User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, help_text='Enter your first name', max_length=150, null=True, verbose_name='first name')),
                ('surname', models.CharField(blank=True, help_text='Enter your surname', max_length=150, null=True, verbose_name='Surname')),
                ('title', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Mr'), (2, 'Mrs'), (3, 'Ms'), (4, 'Dr'), (5, 'Professor')], null=True)),
                ('email', models.EmailField(help_text='Enter your email address.', max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(help_text='Select a unique username.', max_length=150, unique=True)),
                ('bio', models.CharField(blank=True, help_text='Share something about yourself.', max_length=500, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Lead Clinician'), (2, 'Centre Administrator'), (3, 'Paediatric Neurologist'), (4, 'General Paediatrician with Epilepsy Interest'), (5, 'Audit Analyst'), (6, 'Audit Administrator')], null=True)),
                ('hospital_trust', models.CharField(help_text='Enter the main hospital trust where you work.', max_length=100)),
                ('twitter_handle', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AntiEpilepsyMedicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('antiepilepsy_medicine_type', models.IntegerField(blank=True, choices=[(1, 'Acetazolamide'), (2, 'ACTH'), (3, 'Carbamazepine'), (4, 'Clobazam'), (5, 'Clonazepam'), (6, 'Eslicarbazepine acetate'), (7, 'Ethosuximide'), (8, 'Gabapentin'), (9, 'Lacosamide'), (10, 'Lamotrigine'), (11, 'Levetiracetam'), (12, 'Methylprednisolone'), (13, 'Nitrazepam'), (14, 'Oxcarbazepine'), (15, 'Perampanel'), (16, 'Piracetam'), (17, 'Phenobarbital'), (18, 'Phenytoin'), (19, 'Pregabalin'), (20, 'Prednisolone'), (21, 'Primidone'), (22, 'Rufinamide'), (23, 'Sodium valproate'), (24, 'Stiripentol'), (25, 'Sulthiame'), (26, 'Tiagabine'), (27, 'Topiramate'), (28, 'Vigabatrin'), (29, 'Zonisamide'), ('O', 'Other')], default=None, null=True, verbose_name='antiepilepsy medicine name')),
                ('is_rescue_medicine', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is the medicine a rescue medicine?')),
                ('antiepilepsy_medicine_snomed_code', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='antiepilepsy medicine SNOMED-CT code')),
                ('antiepilepsy_medicine_snomed_preferred_name', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='antiepilepsy medicine SNOMED-CT preferred name')),
                ('antiepilepsy_medicine_start_date', models.DateField(blank=True, default=None, null=True, verbose_name='antiepilepsy medicine start date')),
                ('antiepilepsy_medicine_stop_date', models.DateField(blank=True, default=None, null=True, verbose_name='antiepilepsy medicine start date')),
                ('antiepilepsy_medicine_risk_discussed', models.BooleanField(blank=True, default=False, null=True, verbose_name='have the risks related to the antiepilepsy medicine been discussed?')),
            ],
            options={
                'verbose_name': ('antiepilepsy medicine',),
                'verbose_name_plural': 'antiepilepsy medicines',
            },
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('childrens_epilepsy_surgical_service_referral_criteria_met', models.BooleanField(blank=True, default=None, null=True, verbose_name="Have the criteria for referral to a children's epilepsy surgery service been met?")),
                ('consultant_paediatrician_referral_made', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has a referral been made to a consultant paediatrician with an interest in epilepsy?')),
                ('consultant_paediatrician_referral_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date of referral to a consultant paediatrician with expertise in epilepsy.')),
                ('consultant_paediatrician_input_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date seen by a consultant paediatrician with expertise in epilepsy.')),
                ('paediatric_neurologist_referral_made', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has a referral to a consultant paediatric neurologist been made?')),
                ('paediatric_neurologist_referral_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date of referral to a consultant paediatric neurologist.')),
                ('paediatric_neurologist_input_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date seen by consultant paediatric neurologist.')),
                ('childrens_epilepsy_surgical_service_referral_made', models.BooleanField(blank=True, default=None, null=True, verbose_name="Has a referral to a children's epilepsy surgery service been made?")),
                ('childrens_epilepsy_surgical_service_referral_date', models.DateField(blank=True, default=None, null=True, verbose_name="Date of referral to a children's epilepsy surgery service")),
                ('childrens_epilepsy_surgical_service_input_date', models.DateField(blank=True, default=None, null=True, verbose_name="Date seen by children's epilepsy surgery service")),
                ('epilepsy_specialist_nurse_referral_made', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has a referral to an epilepsy nurse specialist been made?')),
                ('epilepsy_specialist_nurse_referral_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date of referral to an epilepsy nurse specialist')),
                ('epilepsy_specialist_nurse_input_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date seen by an epilepsy nurse specialist')),
            ],
            options={
                'verbose_name': ('assessment',),
                'verbose_name_plural': 'assessments',
            },
        ),
        migrations.CreateModel(
            name='AuditProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_complete', models.BooleanField(default=False, null=True)),
                ('registration_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('registration_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('initial_assessment_complete', models.BooleanField(default=False, null=True)),
                ('initial_assessment_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('initial_assessment_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('assessment_complete', models.BooleanField(default=False, null=True)),
                ('assessment_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('assessment_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('epilepsy_context_complete', models.BooleanField(default=False, null=True)),
                ('epilepsy_context_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('epilepsy_context_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('multiaxial_diagnosis_complete', models.BooleanField(default=False, null=True)),
                ('multiaxial_diagnosis_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('multiaxial_diagnosis_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('investigations_complete', models.BooleanField(default=False, null=True)),
                ('investigations_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('investigations_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
                ('management_complete', models.BooleanField(default=False, null=True)),
                ('management_total_expected_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields expected')),
                ('management_total_completed_fields', models.SmallIntegerField(default=0, null=True, verbose_name='Total Number of fields completed')),
            ],
            options={
                'verbose_name': 'Audit Progress',
                'verbose_name_plural': 'Audit Progresses',
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('locked', models.BooleanField(blank=True, default=False, null=True, verbose_name='Locked')),
                ('locked_at', models.DateTimeField(blank=True, null=True, verbose_name='Date record locked')),
                ('nhs_number', models.CharField(max_length=10, verbose_name='NHS Number')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('surname', models.CharField(max_length=100, verbose_name='surname')),
                ('gender', models.IntegerField(choices=[(0, 'Not Known'), (1, 'Male'), (2, 'Female'), (9, 'Not Specified')])),
                ('date_of_birth', models.DateField(verbose_name='date of birth (YYYY-MM-DD)')),
                ('postcode', models.CharField(max_length=8, verbose_name='postcode')),
                ('ethnicity', models.CharField(choices=[('N', 'African'), ('L', 'Any other Asian background'), ('P', 'Any other Black background'), ('S', 'Any other ethnic group'), ('G', 'Any other mixed background'), ('C', 'Any other White background'), ('K', 'Bangladeshi or British Bangladeshi'), ('A', 'British, Mixed British'), ('M', 'Caribbean'), ('R', 'Chinese'), ('H', 'Indian or British Indian'), ('B', 'Irish'), ('Z', 'Not Stated'), ('J', 'Pakistani or British Pakistani'), ('F', 'White and Asian'), ('E', 'White and Black African'), ('D', 'White and Black Caribbean')], max_length=4)),
                ('index_of_multiple_deprivation_quintile', models.PositiveSmallIntegerField(blank=True, editable=False, null=True, verbose_name='index of multiple deprivation calculated from MySociety data.')),
            ],
            options={
                'verbose_name': 'case',
                'verbose_name_plural': 'cases',
            },
        ),
        migrations.CreateModel(
            name='Comorbidity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('comorbidity', models.CharField(choices=[('MoD', 'Mood disorder'), ('AxD', 'Anxiety disorder'), ('EmB', 'Emotional/ behavioural'), ('SHm', 'Self harm'), ('Oth', 'Other'), ('CnD', 'Conduct disorder'), ('ODD', 'Oppositional Defiant Disorder (ODD)'), ('ASD', 'Autistic spectrum disorder'), ('CeP', 'Cerebral palsy'), ('NDC', 'Neurodegenerative disease or condition'), ('ChD', 'An identified chromosomal disorder with a neurological or developmental component'), ('ADH', 'Attention deficit hyperactivity disorder'), ('Int', "intellectual disability/global development delay/'learning disability'"), ('Dsp', 'dyspraxia'), ('Dsl', 'dyslexia'), ('SDo', 'speech disorder'), ('Oth', 'other learning difficulty')], max_length=3)),
                ('comorbidity_free_text', models.CharField(default=None, max_length=50)),
                ('comorbidity_snomed_code', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'comorbidity',
                'verbose_name_plural': 'comorbidities',
            },
        ),
        migrations.CreateModel(
            name='EpilepsyContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('previous_febrile_seizure', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, max_length=2, null=True, verbose_name='has there been a previous febrile seizure?')),
                ('previous_acute_symptomatic_seizure', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, max_length=2, null=True, verbose_name='has there been a previous acute symptomatic seizure?')),
                ('is_there_a_family_history_of_epilepsy', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, max_length=3, null=True, verbose_name='is there a family history of epilepsy?')),
                ('previous_neonatal_seizures', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Uncertain')], default=None, max_length=2, null=True, verbose_name='were there seizures in the neonatal period?')),
                ('diagnosis_of_epilepsy_withdrawn', models.BooleanField(default=None, null=True, verbose_name='has the diagnosis of epilepsy been withdrawn?')),
            ],
            options={
                'verbose_name': 'epilepsy context',
                'verbose_name_plural': 'epilepsy contexts',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('seizure_onset_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date episode occurred or was witnessed.')),
                ('seizure_onset_date_confidence', models.CharField(choices=[('Apx', 'Approximate date'), ('Exc', 'Exact date'), ('NK', 'Not known')], default=None, max_length=3, null=True, verbose_name='how accurate is the date of this episode?')),
                ('episode_definition', models.CharField(choices=[('a', 'This was a single episode'), ('b', 'This was a cluster within 24 hours'), ('c', 'These were 2 or more episodes more than 24 hours apart'), ('d', 'The patient was diagnosed as having epilepsy for another reason')], default=None, max_length=1, null=True, verbose_name='Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.')),
                ('has_number_of_episodes_since_the_first_been_documented', models.BooleanField(default=None, null=True, verbose_name='has the frequency of episodes since the first recorded been documented?')),
                ('has_description_of_the_episode_or_episodes_been_gathered', models.BooleanField(default=None, null=True, verbose_name='has a description of the episode or episodes been gathered?')),
                ('description', models.CharField(blank=True, default='', help_text='What is the episode(s) like and is the description adequate?', max_length=5000, null=True)),
                ('description_keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(help_text='add a key word', max_length=500), blank=True, null=True, size=None)),
                ('epilepsy_or_nonepilepsy_status', models.CharField(blank=True, choices=[('E', 'Epilepsy'), ('NE', 'Non-epilepsy'), ('U', 'Uncertain')], default=None, max_length=3, null=True, verbose_name='Is a diagnosis of epilepsy definite, or uncertain.')),
                ('were_any_of_the_epileptic_seizures_convulsive', models.BooleanField(default=None, null=True, verbose_name='Were any of the epileptic seizures convulsive?')),
                ('epileptic_seizure_onset_type', models.CharField(choices=[('FO', 'Focal onset'), ('GO', 'Generalised onset'), ('UO', 'Unknown onset'), ('UC', 'Unclassified')], default=None, max_length=3, null=True, verbose_name='If epileptic, what is the seizure type (s)?')),
                ('nonepileptic_seizure_type', models.CharField(blank=True, choices=[('SAS', 'Syncope And Anoxic Seizures'), ('BPP', 'Behavioral Psychological And Psychiatric Disorders'), ('SRC', 'Sleep Related Conditions'), ('PMD', 'Paroxysmal Movement Disorders'), ('MAD', 'Migraine Associated Disorders'), ('ME', 'Miscellaneous Events'), ('Oth', 'Other')], default=None, max_length=3, null=True)),
                ('epileptic_generalised_onset', models.CharField(blank=True, choices=[('AEM', 'Absence with eyelid myoclonia'), ('Aab', 'Atypical absence'), ('Ato', 'Atonic'), ('Clo', 'Clonic'), ('EpS', 'Epileptic spasms'), ('MAb', 'Myoclonic absence'), ('MAt', 'Myoclonic-atonic'), ('MTC', 'Myoclonic-tonic-clonic'), ('MyC', 'Myoclonic'), ('Oth', 'Other'), ('TAb', 'Typical absence'), ('TCl', 'Tonic-clonic'), ('Ton', 'Tonic')], default=None, max_length=3, null=True)),
                ('focal_onset_impaired_awareness', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_automatisms', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_atonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_clonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_left', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_right', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_epileptic_spasms', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_hyperkinetic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_myoclonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_tonic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_autonomic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_behavioural_arrest', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_cognitive', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_emotional', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_sensory', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_centrotemporal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_temporal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_frontal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_parietal', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_occipital', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_gelastic', models.BooleanField(blank=True, default=None, null=True)),
                ('focal_onset_focal_to_bilateral_tonic_clonic', models.BooleanField(blank=True, default=None, null=True)),
                ('nonepileptic_seizure_unknown_onset', models.CharField(blank=True, choices=[('TCl', 'Tonic-clonic'), ('EpS', 'Epileptic spasms'), ('BAr', 'Behaviour arrest'), ('Oth', 'Other')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_syncope', models.CharField(blank=True, choices=[('a', 'Vasovagal syncope'), ('b', 'Reflex anoxic seizures'), ('c', 'Breath-holding attacks'), ('d', 'Hyperventilation syncope'), ('e', 'Compulsive valsalva'), ('f', 'Neurological syncope'), ('g', 'Imposed upper airways obstruction'), ('h', 'Orthostatic intolerance'), ('i', 'Long QT and cardiac syncope'), ('j', 'Hyper-cyanotic spells')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_behavioural', models.CharField(blank=True, choices=[('a', 'Daydreaming / Inattention'), ('b', 'Infantile gratification'), ('c', 'Eidetic imagery'), ('d', 'Tantrums and rage reactions'), ('e', 'Out of body experiences'), ('f', 'Panic attacks'), ('g', 'Dissociative states'), ('h', 'Non-epileptic seizures'), ('i', 'Hallucinations in psychiatric disorders'), ('j', 'Fabricated / factitious illness')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_sleep', models.CharField(blank=True, choices=[('a', 'Sleep related rhythmic movement disorders'), ('b', 'Hypnogogic jerks'), ('c', 'Parasomnias'), ('d', 'REM sleep disorders'), ('e', 'Benign neonatal sleep myoclonus'), ('f', 'Periodic leg movements'), ('g', 'Narcolepsy-cataplexy')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_paroxysmal', models.CharField(blank=True, choices=[('a', 'Tics'), ('b', 'Stereotypies'), ('c', 'Paroxysmal kinesigenic dyskinesia'), ('d', 'Paroxysmal nonkinesigenic dyskinesia'), ('e', 'Paroxysmal exercise induced dyskinesia'), ('f', 'Benign paroxysmal tonic upgaze'), ('g', 'Episodic ataxias'), ('h', 'Alternating hemiplegia'), ('i', 'Hyperekplexia'), ('j', 'Opsoclonus-myoclonus syndrome')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_migraine', models.CharField(blank=True, choices=[('a', 'Migraine with visual aura'), ('b', 'Familial hemiplegic migraine'), ('c', 'Benign paroxysmal torticollis'), ('d', 'Benign paroxysmal vertigo'), ('e', 'Cyclical vomiting')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_miscellaneous', models.CharField(blank=True, choices=[('a', 'Benign myoclonus of infancy and shuddering attacks'), ('b', 'Jitteriness'), ('c', 'Sandifer syndrome'), ('d', 'Non-epileptic head drops'), ('e', 'Spasmus nutans'), ('f', 'Raised intracranial pressure'), ('g', 'Paroxysmal extreme pain disorder'), ('h', 'Spinal myoclonus')], default=None, max_length=3, null=True)),
                ('nonepileptic_seizure_other', models.CharField(blank=True, default=None, max_length=250, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HospitalTrust',
            fields=[
                ('OrganisationID', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('OrganisationCode', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('OrganisationType', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('SubType', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('Sector', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('OrganisationStatus', models.CharField(blank=True, default=None, max_length=50, null=True)),
                ('IsPimsManaged', models.CharField(blank=True, default=None, max_length=20, null=True)),
                ('OrganisationName', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address1', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address2', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Address3', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('City', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('County', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Postcode', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Latitude', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Longitude', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ParentODSCode', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('ParentName', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Phone', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Email', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Website', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('Fax', models.CharField(blank=True, default=None, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'hospital trust',
                'verbose_name_plural': 'hospital trusts',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(help_text='A validated keyword for describing the semiology of a seizure', max_length=100)),
                ('category', models.CharField(help_text='The semiology category each keyword belongs to.', max_length=100)),
            ],
            options={
                'verbose_name': 'Keyword',
                'verbose_name_plural': 'Keywords',
            },
        ),
        migrations.CreateModel(
            name='MultiaxialDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('syndrome_present', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is there an identifiable epilepsy syndrome?')),
                ('seizure_cause_main', models.CharField(blank=True, choices=[('Str', 'Structural'), ('Gen', 'Genetic'), ('Inf', 'Infectious'), ('Met', 'Metabolic'), ('Imm', 'Immune'), ('NK', 'Not known')], default=None, max_length=3, null=True, verbose_name='main identified cause of seizure(s)')),
                ('seizure_cause_structural', models.CharField(blank=True, choices=[('FCD', 'Focal cortical dysplasia'), ('HyH', 'Hypothalamic Hamartoma'), ('LGT', 'Low grade tumour'), ('MCD', 'Malformations of Cortical Development'), ('NR', 'Not required'), ('StW', 'Sturge Weber'), ('TBI', 'Traumatic brain injury'), ('TbS', 'Tuberous Sclerosis'), ('TuO', 'Tumour (other)'), ('Vas', 'Vascular (eg arterial ischaemic stroke venous ischaemia cerebral haemorrhage)')], default=None, max_length=3, null=True, verbose_name='main identified structural cause of seizure(s)')),
                ('seizure_cause_genetic', models.CharField(blank=True, choices=[('AnS', 'Angelman Syndrome'), ('ChA', 'Chromosomal abnormality'), ('DrS', 'Dravet syndrome'), ('GTD', 'Glucose Transporter Defect'), ('GeA', 'Gene abnormality'), ('ReS', 'Rett Syndrome')], default=None, max_length=3, null=True, verbose_name='main identified genetic cause of seizure(s)')),
                ('seizure_cause_gene_abnormality', models.CharField(blank=True, choices=[('UBE', 'UBE3A'), ('GLU', 'GLUT1'), ('SLC', 'SLC2A1'), ('MEC', 'MECP2'), ('SCN', 'SCN1A'), ('STX', 'STXBP1'), ('CDK', 'CDKL5'), ('KCN', 'KCNQ2'), ('SCN', 'SCN2A'), ('KCN', 'KCNT1'), ('ARX', 'ARX'), ('FOX', 'FOXG1'), ('PCD', 'PCDH19'), ('GRI', 'GRIN2A'), ('Oth', 'Other')], default=None, max_length=3, null=True, verbose_name='main identified gene abnormality cause of seizure(s)')),
                ('seizure_cause_genetic_other', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='other identified genetic cause of seizure(s) not previously specified.')),
                ('seizure_cause_chromosomal_abnormality', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='main identified chromosomal cause of seizure(s)')),
                ('seizure_cause_infectious', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='main identified infectious cause of seizure(s)')),
                ('seizure_cause_metabolic', models.CharField(blank=True, choices=[('Mit', 'Mitochondrial disorder'), ('Neu', 'Neuronal Ceroid Lipofuscinosis (Batten Disease)'), ('PPM', 'Disorder of pyridoxine/pyridoxal phosphate metabolism'), ('BiM', 'Disorder of biotin metabolism'), ('CrM', 'Disorder of creatine metabolism'), ('AmA', 'Disorder of amino acid'), ('UrA', 'Disorder of urea cycle'), ('PyP', 'Disorder of pyrimidine and purine'), ('Cho', 'Disorder of cholesterol'), ('Oth', 'Other neurometabolic disorder')], default=None, max_length=3, null=True, verbose_name='main identified metabolic cause of seizure(s)')),
                ('seizure_cause_metabolic_other', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='other identified metabolic cause of seizure(s) not previously specified.')),
                ('seizure_cause_immune', models.CharField(blank=True, choices=[('RaE', 'Rasmussen Encephalitis'), ('AnM', 'Antibody mediated')], default=None, max_length=3, null=True, verbose_name='main identified immune cause of seizure(s).')),
                ('seizure_cause_immune_antibody', models.CharField(blank=True, choices=[('GAD', 'GAD'), ('MOG', 'MOG'), ('NMD', 'NMDAR'), ('Oth', 'Other'), ('TPO', 'TPO'), ('VGK', 'VGKC')], default=None, max_length=3, null=True, verbose_name='autoantibody identified as cause of seizure(s).')),
                ('seizure_cause_immune_antibody_other', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='other identified antibody not previously specified causing seizure(s).')),
                ('relevant_impairments_behavioural_educational', models.BooleanField(blank=True, default=None, max_length=50, null=True, verbose_name='Are there any relevant impairments: behavioural or educational, emotional problems?')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
            ],
            options={
                'verbose_name': 'DESSCRIBE assessment',
                'verbose_name_plural': 'DESSCRIBE assessments',
            },
        ),
        migrations.CreateModel(
            name='NonEpilepsy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nonepilepsy_type', models.IntegerField(choices=[(1, 'Syncope And Anoxic Seizures'), (2, 'Behavioral Psychological And Psychiatric Disorders'), (3, 'Sleep Related Conditions'), (4, 'Paroxysmal Movement Disorders'), (5, 'Migraine Associated Disorders'), (6, 'Miscellaneous Events'), (7, 'Other')], verbose_name='Type of nonepilepsy presentation.')),
                ('specific_nonepilepsy_diagnosis', models.CharField(max_length=50, verbose_name='Specific nonepilepsy diagnosis if known')),
                ('specific_nonepilepsy_diagnosis_snomed_code', models.CharField(max_length=3, verbose_name='SNOMED-CT code for nonepilepsy diagnosis if known')),
                ('nonepilepsy_syncope', models.CharField(choices=[('a', 'Vasovagal syncope'), ('b', 'Reflex anoxic seizures'), ('c', 'Breath-holding attacks'), ('d', 'Hyperventilation syncope'), ('e', 'Compulsive valsalva'), ('f', 'Neurological syncope'), ('g', 'Imposed upper airways obstruction'), ('h', 'Orthostatic intolerance'), ('i', 'Long QT and cardiac syncope'), ('j', 'Hyper-cyanotic spells')], max_length=3, verbose_name='Type of nonepileptic syncope.')),
                ('nonepilepsy_syncope_snomed_code', models.CharField(max_length=3, verbose_name='SNOMED-CT code for nonepilepsy syncope type')),
                ('nonepilepsy_behavioural_symptoms', models.CharField(choices=[('a', 'Daydreaming / Inattention'), ('b', 'Infantile gratification'), ('c', 'Eidetic imagery'), ('d', 'Tantrums and rage reactions'), ('e', 'Out of body experiences'), ('f', 'Panic attacks'), ('g', 'Dissociative states'), ('h', 'Non-epileptic seizures'), ('i', 'Hallucinations in psychiatric disorders'), ('j', 'Fabricated / factitious illness')], max_length=3, verbose_name='Type of behavioural arrest described.')),
                ('nonepilepsy_behavioural_symptoms_snomed_code', models.CharField(max_length=50, verbose_name='SNOMED-CT code for type of behavioural arrest described.')),
                ('nonepilepsy_sleep', models.CharField(choices=[('a', 'Sleep related rhythmic movement disorders'), ('b', 'Hypnogogic jerks'), ('c', 'Parasomnias'), ('d', 'REM sleep disorders'), ('e', 'Benign neonatal sleep myoclonus'), ('f', 'Periodic leg movements'), ('g', 'Narcolepsy-cataplexy')], max_length=3, verbose_name='Type of sleep symptoms reported.')),
                ('nonepilepsy_sleep_snomed_code', models.CharField(max_length=50, verbose_name='SNOMED-CT code for type of sleep symptoms reported.')),
                ('nonepilepsy_paroxysmal', models.CharField(choices=[('a', 'Tics'), ('b', 'Stereotypies'), ('c', 'Paroxysmal kinesigenic dyskinesia'), ('d', 'Paroxysmal nonkinesigenic dyskinesia'), ('e', 'Paroxysmal exercise induced dyskinesia'), ('f', 'Benign paroxysmal tonic upgaze'), ('g', 'Episodic ataxias'), ('h', 'Alternating hemiplegia'), ('i', 'Hyperekplexia'), ('j', 'Opsoclonus-myoclonus syndrome')], max_length=3, verbose_name='Type of paroxysmal nonepileptic symptoms reported.')),
                ('nonepilepsy_paroxysmal_snomed_code', models.CharField(max_length=50, verbose_name='SNOMED-CT code for type of paroxysmal nonepileptic symptoms reported.')),
                ('nonepilepsy_migraine', models.CharField(choices=[('a', 'Migraine with visual aura'), ('b', 'Familial hemiplegic migraine'), ('c', 'Benign paroxysmal torticollis'), ('d', 'Benign paroxysmal vertigo'), ('e', 'Cyclical vomiting')], max_length=3, verbose_name='Migraine semiology.')),
                ('nonepilepsy_migraine_snomed_code', models.CharField(max_length=50, verbose_name='SNOMED-CT code for migraine semiology.')),
                ('nonepilepsy_miscellaneous', models.CharField(choices=[('a', 'Benign myoclonus of infancy and shuddering attacks'), ('b', 'Jitteriness'), ('c', 'Sandifer syndrome'), ('d', 'Non-epileptic head drops'), ('e', 'Spasmus nutans'), ('f', 'Raised intracranial pressure'), ('g', 'Paroxysmal extreme pain disorder'), ('h', 'Spinal myoclonus')], max_length=3, verbose_name='Other nonepileptic presentation if not previously specified.')),
                ('nonepilepsy_other', models.CharField(max_length=250, verbose_name='Other nonepileptic presentation if not previously specified.')),
            ],
            options={
                'verbose_name': 'Nonepilepsy',
                'verbose_name_plural': 'Nonepilepsies',
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('registration_date', models.DateField(default=None, null=True, verbose_name='Date on which registered for the the Epilepsy12 audit')),
                ('registration_close_date', models.DateField(default=None, null=True, verbose_name='Date at which the registration is due to close')),
                ('referring_clinician', models.CharField(default=None, max_length=50, null=True)),
                ('eligibility_criteria_met', models.BooleanField(default=None, null=True)),
                ('cohort', models.PositiveSmallIntegerField(default=None, null=True)),
                ('audit_progress', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.auditprogress')),
                ('case', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='epilepsy12.case')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'Registration',
                'verbose_name_plural': 'Registrations',
            },
        ),
        migrations.CreateModel(
            name='Syndrome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('syndrome_diagnosis_date', models.DateField(blank=True, default=None, null=True, verbose_name='The date the syndrome diagnosis was made.')),
                ('syndrome_name', models.IntegerField(blank=True, choices=[(27, 'CDKL5-DEE'), (16, 'Childhood absence epilepsy'), (5, 'Childhood occipital visual epilepsy'), (34, 'DEE or EE with spike-and-wave activation in sleep'), (23, 'Dravet syndrome'), (20, 'Early infantile DEE'), (21, 'Epilepsy of infancy with migrating focal seizures'), (11, 'Epilepsy with auditory features'), (15, 'Epilepsy with eyelid myoclonia'), (19, 'Epilepsy with generalized tonic–clonic seizures alone'), (14, 'Epilepsy with myoclonic absences'), (32, 'Epilepsy with myoclonic–atonic seizures'), (39, 'Epilepsy with reading-induced seizures'), (24, 'Etiology-specific DEEs'), (10, 'Familial focal epilepsy with variable foci'), (8, 'Familial mesial temporal lobe epilepsy'), (35, 'Febrile infection-related epilepsy syndrome'), (29, 'GLUT1DS-DEE'), (31, 'Gelastic seizures with HH'), (12, 'Genetic epilepsy with febrile seizures plus'), (36, 'Hemiconvulsion–hemiplegia–epilepsy'), (22, 'Infantile epileptic spasms syndrome'), (17, 'Juvenile absence epilepsy'), (18, 'Juvenile myoclonic epilepsy'), (25, 'KCNQ2-DEE'), (33, 'Lennox–Gastaut syndrome'), (7, 'Mesial temporal lobe epilepsy with hippocampal sclerosis'), (13, 'Myoclonic epilepsy in infancy'), (28, 'PCDH19 clustering epilepsy'), (6, 'Photosensitive occipital lobe epilepsy'), (38, 'Progressive myoclonus epilepsies'), (26, 'Pyridoxine-dependent and pyridox(am)ine 5′ phosphate deficiency DEE'), (37, 'Rasmussen syndrome'), (1, 'Self-limited (familial) infantile epilepsy'), (0, 'Self-limited (familial) neonatal epilepsy'), (4, 'Self-limited epilepsy with autonomic seizures'), (3, 'Self-limited epilepsy with centrotemporal spikes'), (2, 'Self-limited familial neonatal-infantile epilepsy'), (9, 'Sleep-related hypermotor (hyperkinetic) epilepsy'), (30, 'Sturge–Weber syndrome')], default=None, null=True, verbose_name='Select an identifiable epilepsy syndrome?')),
                ('syndrome_diagnosis_active', models.BooleanField(default=None, null=True, verbose_name='Is the diagnosis of the syndrome still active?')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('multiaxial_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.multiaxialdiagnosis')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('site_is_actively_involved_in_epilepsy_care', models.BooleanField(default=False, null=True)),
                ('site_is_primary_centre_of_epilepsy_care', models.BooleanField(default=False, null=True)),
                ('site_is_childrens_epilepsy_surgery_centre', models.BooleanField(default=False, null=True)),
                ('site_is_paediatric_neurology_centre', models.BooleanField(default=False, null=True)),
                ('site_is_general_paediatric_centre', models.BooleanField(default=False, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('hospital_trust', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='hospital_trust', to='epilepsy12.hospitaltrust')),
                ('registration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'site',
                'verbose_name_plural': 'sites',
            },
        ),
        migrations.AddField(
            model_name='multiaxialdiagnosis',
            name='registration',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registration', to='epilepsy12.registration'),
        ),
        migrations.AddField(
            model_name='multiaxialdiagnosis',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.CreateModel(
            name='Management',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('has_an_aed_been_given', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has an antiepilepsy medicine been prescribed?')),
                ('has_rescue_medication_been_prescribed', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has a rescue medicine been prescribed?')),
                ('is_a_pregnancy_prevention_programme_in_place', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is there a pregnancy prevention programme (PPP) in place?')),
                ('individualised_care_plan_in_place', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has an individualised care plan been put in place?')),
                ('individualised_care_plan_date', models.DateField(blank=True, default=None, null=True, verbose_name='On what date was the individualised care plan put in place?')),
                ('individualised_care_plan_has_parent_carer_child_agreement', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has the parent or carer and child agreement to an individualised care plan been documented?')),
                ('individualised_care_plan_includes_service_contact_details', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include service contact details?')),
                ('individualised_care_plan_include_first_aid', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include first aid advice?')),
                ('individualised_care_plan_parental_prolonged_seizure_care', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include parental advice on managing prolonged seizures?')),
                ('individualised_care_plan_includes_general_participation_risk', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include general participation and risk assessment?')),
                ('individualised_care_plan_addresses_water_safety', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan address water safety?')),
                ('individualised_care_plan_addresses_sudep', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan address sudden unexplained death in epilepsy?')),
                ('individualised_care_plan_includes_aihp', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include AIHP?')),
                ('individualised_care_plan_includes_ehcp', models.BooleanField(blank=True, default=None, null=True, verbose_name='Does the individualised care plan include an educational health care plan (EHCP)?')),
                ('has_individualised_care_plan_been_updated_in_the_last_year', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has the individualised care plan been updated in the last year?')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration', verbose_name='related registration')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': ('management',),
                'verbose_name_plural': 'managements',
            },
        ),
        migrations.CreateModel(
            name='Investigations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('eeg_indicated', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is an EEG indicated?')),
                ('eeg_request_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date EEG requested')),
                ('eeg_performed_date', models.DateField(blank=True, default=None, null=True, verbose_name='Date EEG performed')),
                ('twelve_lead_ecg_status', models.BooleanField(blank=True, default=None, null=True)),
                ('ct_head_scan_status', models.BooleanField(blank=True, default=None, null=True, verbose_name='Has a CT head been performed?')),
                ('mri_indicated', models.BooleanField(blank=True, default=None, null=True, verbose_name='Is an MRI brain indicated?')),
                ('mri_brain_requested_date', models.DateField(blank=True, default=None, null=True, verbose_name='MRI brain requested date')),
                ('mri_brain_performed_date', models.DateField(blank=True, default=None, null=True, verbose_name='MRI brain performed date')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('registration', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration', verbose_name='Related Registration')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'Investigation Milestones',
                'verbose_name_plural': 'Investigation Milestones',
            },
        ),
        migrations.CreateModel(
            name='InitialAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='record created on <function now at 0x10587cf70>')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='record updated on <function now at 0x10587cf70>')),
                ('date_of_initial_assessment', models.DateField(default=None, null=True, verbose_name='On what date did the initial assessment occur?')),
                ('general_paediatrics_referral_made', models.BooleanField(default=None, null=True, verbose_name='date of referral to general paediatrics')),
                ('date_of_referral_to_general_paediatrics', models.DateField(default=None, null=True, verbose_name='date of referral to general paediatrics')),
                ('first_paediatric_assessment_in_acute_or_nonacute_setting', models.IntegerField(choices=[(1, 'Acute'), (2, 'Non-acute'), (3, "Don't know")], default=None, null=True, verbose_name='Is the first paediatric assessment in an acute or nonacute setting?')),
                ('has_description_of_the_episode_or_episodes_been_gathered', models.BooleanField(default=None, null=True, verbose_name='has a description of the episode or episodes been gathered?')),
                ('when_the_first_epileptic_episode_occurred_confidence', models.CharField(choices=[('Apx', 'Approximate date'), ('Exc', 'Exact date'), ('NK', 'Not known')], default=None, max_length=3, null=True, verbose_name='how accurate is the date of the first epileptic episode?')),
                ('when_the_first_epileptic_episode_occurred', models.DateField(default=None, null=True, verbose_name='what is the date that the first epileptic episode occurred?')),
                ('has_number_of_episodes_since_the_first_been_documented', models.BooleanField(default=None, null=True, verbose_name='has the frequency of episodes since the first recorded been documented?')),
                ('general_examination_performed', models.BooleanField(default=None, null=True, verbose_name='has a general clinical examination been performed?')),
                ('neurological_examination_performed', models.BooleanField(default=None, null=True, verbose_name='has a neurological examination been performed?')),
                ('developmental_learning_or_schooling_problems', models.BooleanField(default=None, null=True, verbose_name='has the presence or absence of developmental, learning or school-based problems been recorded?')),
                ('behavioural_or_emotional_problems', models.BooleanField(default=None, null=True, verbose_name='are there any behaviour or emotional comorbid conditions present?')),
                ('diagnostic_status', models.CharField(choices=[('a', 'The child has had an episode or episodes where one or more are considered epileptic'), ('b', 'The child has had an episode or episodes that are considered non-epileptic only'), ('c', 'The child has had an episode or episodes where there remains uncertainty whether episodes were epileptic or not.')], default=None, max_length=1, null=True, verbose_name='Status of epilepsy diagnosis. Must have epilepsy or probable epilepsy to be included.')),
                ('episode_definition', models.CharField(choices=[('a', 'This was a single episode'), ('b', 'This was a cluster within 24 hours'), ('c', 'These were 2 or more episodes more than 24 hours apart'), ('d', 'The patient was diagnosed as having epilepsy for another reason')], default=None, max_length=1, null=True, verbose_name='Episode definition. Part of case definition and defines if represents a cluster or discrete episodes.')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)')),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration', verbose_name='Related Registration')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)')),
            ],
            options={
                'verbose_name': 'initial assessment',
                'verbose_name_plural': 'initial assessments',
            },
        ),
        migrations.AddIndex(
            model_name='hospitaltrust',
            index=models.Index(fields=['ParentName'], name='epilepsy12__ParentN_6c4b26_idx'),
        ),
        migrations.AddField(
            model_name='episode',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='episode',
            name='multiaxial_diagnosis',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.multiaxialdiagnosis'),
        ),
        migrations.AddField(
            model_name='episode',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='epilepsycontext',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='epilepsycontext',
            name='registration',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration', verbose_name='Related Registration'),
        ),
        migrations.AddField(
            model_name='epilepsycontext',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='comorbidity',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comorbidities', to='epilepsy12.case'),
        ),
        migrations.AddField(
            model_name='comorbidity',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='comorbidity',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='case',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='case',
            name='locked_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='locked by'),
        ),
        migrations.AddField(
            model_name='case',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='registration',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.registration', verbose_name='related registration'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='antiepilepsymedicine',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record created by user in %(class)'),
        ),
        migrations.AddField(
            model_name='antiepilepsymedicine',
            name='management',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='epilepsy12.management', verbose_name='related management'),
        ),
        migrations.AddField(
            model_name='antiepilepsymedicine',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated%(app_label)s_%(class)s_related', to=settings.AUTH_USER_MODEL, verbose_name='record updated by user in %(class)'),
        ),
        migrations.AddField(
            model_name='epilepsy12user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='epilepsy12user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='initialassessment',
            index=models.Index(fields=['date_of_initial_assessment'], name='epilepsy12__date_of_e184d3_idx'),
        ),
    ]
